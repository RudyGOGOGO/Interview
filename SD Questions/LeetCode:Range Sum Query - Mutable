Given an integer array nums, find the sum of the elements between indices i and j (i â‰¤ j), inclusive.

The update(i, val) function modifies nums by updating the element at index i to val.
Example:
Given nums = [1, 3, 5]

sumRange(0, 2) -> 9
update(1, 2)
sumRange(0, 2) -> 8
Note:
The array is only modifiable by the update function.
You may assume the number of calls to update and sumRange function is distributed evenly.
Subscribe to see which companies asked this question



class NumArray {
public:
    NumArray(vector<int> &nums) {
        arr = nums;
        n = arr.size();
        if(n!=0)
            constructST();
    }

    void update(int i, int val) {
        int diff = val-arr[i];
        arr[i] = val;//update.
        updateUtil(0,n-1,i,diff,0);
        //cout << "update" << endl;
    }

    int sumRange(int i, int j) {
       int sum= sumRangeUtil(0,n-1,i,j,0); 
       //cout << "sum =  " << sum << " " << i << " and " << j << endl;
       return sum;
    }
    
private:
    void constructST()
    {
        int height = (int)ceil(log2(n)); //upper value.
        int max_size = 2* pow(2,height)-1;
        //cout << "contructor" << endl;
        st.reserve(max_size);
        constructSTUtil(0,n-1,0);
        //cout << "contructor done" << endl;
    }
    
    // si: current index node for segmented tree, correponding input array index [start,end]
    int constructSTUtil(int start,int end,int si)
    {
        if(start==end){ st[si] = arr[start]; return st[si];}//must be input array value for leaf nodes.
        int mid = start + (end-start)/2;
        st[si] = constructSTUtil(start,mid,2*si+1) + constructSTUtil(mid+1,end,2*si+2);
        return st[si];
    }
    
    int sumRangeUtil(int ss,int se,int qs,int qe,int si)
    {
        if(qs<=ss && qe>=se) return st[si]; //search range include the segmented tree correspoding array index.
        if(qe<ss || qs>se) return 0;  //search index range outside of segemented tree
        int mid = ss+(se-ss)/2;
        return sumRangeUtil(ss,mid,qs,qe,2*si+1) + sumRangeUtil(mid+1,se,qs,qe,2*si+2);
    }
    
    void updateUtil(int ss,int se,int i,int diff,int si)
    {
        if(i<ss||i>se) return; //outside of the range.
        st[si]  = st[si]+diff; //update the value.
        if(se!=ss)
        {
            int mid = ss+(se-ss)/2;
            updateUtil(ss,mid,i,diff,2*si+1);
            updateUtil(mid+1,se,i,diff,2*si+2);
        }
    }
    int n; 
    vector<int> arr;
    vector<int>st;//segmented tree.
};


// Your NumArray object will be instantiated and called as such:
// NumArray numArray(nums);
// numArray.sumRange(0, 1);
// numArray.update(1, 10);
// numArray.sumRange(1, 2);
