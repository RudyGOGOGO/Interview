Leetcode: wordLadder I. 

DFS time limited. 


class Solution {
public:
int ladderLength(string beginWord, string endWord, unordered_set<string>& wordList) {
     int step = 0;
     min_step = INT_MAX;
     unordered_map<string, bool> visited;
     dfs(beginWord,endWord,wordList,visited,&step);
     return min_step==INT_MAX?0:min_step;
    }
    
private:
void dfs(string beginWord, string endWord, unordered_set<string>& wordList,unordered_map<string, bool>&visited,int *step)
    {
        if(beginWord.compare(endWord)==0)
        {
            //cout << *step << endl;
            if(*step<min_step) 
                min_step = *step;
            return;
        }
        for(int i = 0;i<beginWord.size();i++)
        {
            for(char c = 'a';c<='z';c++)
            {
                if(c == beginWord[i]) continue;
                
                char tmp = beginWord[i];
                beginWord[i] = c;
                if(wordList.find(beginWord)!=wordList.end() && visited[beginWord] == false )
                {
                    *step++;
                     //cout << beginWord << endl;
                    visited[beginWord] = true;
                    dfs(beginWord,endWord,wordList,visited,step);
                    visited[beginWord] = false;
                }
                beginWord[i] = tmp;
            }
        }
    }
    int min_step;
    //int step;
};
